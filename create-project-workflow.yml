name: Create Airia Project with User Group and Budget

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project Name'
        required: true
        type: string
      project_description:
        description: 'Project Description'
        required: false
        type: string
        default: ''
      user_group_name:
        description: 'Existing User Group Name'
        required: true
        type: string
      tenant_id:
        description: 'Tenant ID'
        required: true
        type: string
      budget_amount:
        description: 'Budget Amount (in dollars)'
        required: true
        type: string
      budget_period:
        description: 'Budget Period (in days)'
        required: false
        type: string
        default: '30'
      budget_alert:
        description: 'Budget Alert Percentage'
        required: false
        type: string
        default: '80'
      budget_stop:
        description: 'Stop executions when budget is reached'
        required: false
        type: boolean
        default: true

env:
  API_BASE_URL: https://prodaus.api.airia.ai

jobs:
  create-project-setup:
    runs-on: ubuntu-latest

    steps:
      - name: Create Project
        id: create_project
        run: |
          response=$(curl -X POST "${{ env.API_BASE_URL }}/v1/Project" \
            -H "Content-Type: application/json" \
            -H "X-API-KEY: ${{ secrets.AIRIA_API_TOKEN }}" \
            -H "x-correlation-id: ${{ github.run_id }}" \
            -d @- <<'EOF'
          {
            "name": "${{ inputs.project_name }}",
            "tenantId": "${{ inputs.tenant_id }}",
            "description": "${{ inputs.project_description }}",
            "requireClassification": false,
            "projectType": "Standard",
            "models": [],
            "apiKeys": [],
            "prompts": [],
            "memories": [],
            "pipelines": [],
            "dataSources": []
          }
          EOF
          )

          echo "Project created successfully"
          project_id=$(echo "$response" | jq -r '.id')
          echo "project_id=$project_id" >> $GITHUB_OUTPUT
          echo "Project ID: $project_id"

      - name: Update Project Budget
        id: update_budget
        run: |
          response=$(curl -X PUT "${{ env.API_BASE_URL }}/v1/Project/${{ steps.create_project.outputs.project_id }}" \
            -H "Content-Type: application/json" \
            -H "X-API-KEY: ${{ secrets.AIRIA_API_TOKEN }}" \
            -H "x-correlation-id: ${{ github.run_id }}" \
            -d @- <<'EOF'
          {
            "name": "${{ inputs.project_name }}",
            "description": "${{ inputs.project_description }}",
            "tenantId": "${{ inputs.tenant_id }}",
            "budgetAmount": ${{ inputs.budget_amount }},
            "budgetPeriod": ${{ inputs.budget_period }},
            "budgetAlert": ${{ inputs.budget_alert }},
            "budgetStop": ${{ inputs.budget_stop }},
            "requireClassification": false,
            "projectType": "Standard",
            "models": [],
            "apiKeys": [],
            "prompts": [],
            "memories": [],
            "pipelines": [],
            "dataSources": []
          }
          EOF
          )

          echo "Project budget updated successfully"

      - name: Get User Group ID by Name
        id: get_group
        run: |
          response=$(curl -X GET "${{ env.API_BASE_URL }}/v1/Groups" \
            -H "Content-Type: application/json" \
            -H "X-API-KEY: ${{ secrets.AIRIA_API_TOKEN }}" \
            -H "x-correlation-id: ${{ github.run_id }}")

          group_id=$(echo "$response" | jq -r '.[] | select(.name == "${{ inputs.user_group_name }}") | .id // .groupId' | head -n 1)

          if [ -z "$group_id" ] || [ "$group_id" == "null" ]; then
            echo "User group with name '${{ inputs.user_group_name }}' not found"
            exit 1
          fi

          echo "group_id=$group_id" >> $GITHUB_OUTPUT
          echo "Found Group ID: $group_id"

      - name: Assign Group to Project
        run: |
          response=$(curl -X POST "${{ env.API_BASE_URL }}/${{ steps.get_group.outputs.group_id }}/roles" \
            -H "Content-Type: application/json" \
            -H "X-API-KEY: ${{ secrets.AIRIA_API_TOKEN }}" \
            -H "x-correlation-id: ${{ github.run_id }}" \
            -d @- <<'EOF'
          {
            "groupId": "${{ steps.get_group.outputs.group_id }}",
            "roleIds": [],
            "projectIds": ["${{ steps.create_project.outputs.project_id }}"]
          }
          EOF
          )

          echo "Group assigned to project successfully"

      - name: Summary
        run: |
          echo "## Project Setup Complete :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Name:** ${{ inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project ID:** ${{ steps.create_project.outputs.project_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **User Group:** ${{ inputs.user_group_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Group ID:** ${{ steps.get_group.outputs.group_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget:** \$${{ inputs.budget_amount }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget Period:** ${{ inputs.budget_period }} days" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget Alert:** ${{ inputs.budget_alert }}%" >> $GITHUB_STEP_SUMMARY
