name: Create Airia Project with User Group and Budget

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project Name'
        required: true
        type: string
      project_description:
        description: 'Project Description'
        required: false
        type: string
        default: ''
      user_group_name:
        description: 'Existing User Group Name'
        required: true
        type: string
      budget_amount:
        description: 'Budget Amount (in dollars)'
        required: true
        type: string
      budget_period:
        description: 'Budget Period (in days)'
        required: false
        type: string
        default: '30'
      budget_alert:
        description: 'Budget Alert Percentage'
        required: false
        type: string
        default: '80'
      budget_stop:
        description: 'Stop executions when budget is reached'
        required: false
        type: boolean
        default: true

env:
  API_BASE_URL: https://prodaus.api.airia.ai

jobs:
  create-project-setup:
    runs-on: ubuntu-latest

    steps:
      - name: Create Project
        id: create_project
        run: |
          response=$(curl -X POST "${{ env.API_BASE_URL }}/v1/Project" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.AIRIA_API_TOKEN }}" \
            -H "x-correlation-id: ${{ github.run_id }}" \
            -d '{
              "name": "${{ inputs.project_name }}",
              "description": "${{ inputs.project_description }}",
              "budgetAmount": ${{ inputs.budget_amount }},
              "budgetPeriod": ${{ inputs.budget_period }},
              "budgetAlert": ${{ inputs.budget_alert }},
              "budgetStop": ${{ inputs.budget_stop }}
            }' \
            -w "\n%{http_code}" -s)

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          if [ "$http_code" [Person1] 201 ]; then
            echo "Project created successfully"
            project_id=$(echo "$body" | jq -r '.id')
            echo "project_id=$project_id" >> $GITHUB_OUTPUT
            echo "Project ID: $project_id"
          else
            echo "Failed to create project. HTTP Status: $http_code"
            echo "Response: $body"
            exit 1
          fi

      - name: Create User Group
        id: create_group
        run: |
          response=$(curl -X POST "${{ env.API_BASE_URL }}/v1/Groups" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.AIRIA_API_TOKEN }}" \
            -H "x-correlation-id: ${{ github.run_id }}" \
            -d '{
              "name": "${{ inputs.user_group_name }}",
              "description": "User group for project: ${{ inputs.project_name }}"
            }' \
            -w "\n%{http_code}" -s)

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          if [ "$http_code" [Person1] 200 ] || [ "$http_code" [Person1] 201 ]; then
            echo "User group created successfully"
            group_id=$(echo "$body" | jq -r '.id // .groupId')
            echo "group_id=$group_id" >> $GITHUB_OUTPUT
            echo "Group ID: $group_id"
          else
            echo "Failed to create user group. HTTP Status: $http_code"
            echo "Response: $body"
            exit 1
          fi

      - name: Assign Group to Project
        run: |
          response=$(curl -X POST "${{ env.API_BASE_URL }}/${{ steps.create_group.outputs.group_id }}/roles" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.AIRIA_API_TOKEN }}" \
            -H "x-correlation-id: ${{ github.run_id }}" \
            -d '{
              "groupId": "${{ steps.create_group.outputs.group_id }}",
              "roleIds": [],
              "projectIds": ["${{ steps.create_project.outputs.project_id }}"]
            }' \
            -w "\n%{http_code}" -s)

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          if [ "$http_code" [Person1] 200 ] || [ "$http_code" -eq 201 ] || [ "$http_code" -eq 204 ]; then
            echo "Group assigned to project successfully"
          else
            echo "Failed to assign group to project. HTTP Status: $http_code"
            echo "Response: $body"
            exit 1
          fi

      - name: Summary
        run: |
          echo "## Project Setup Complete :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Name:** ${{ inputs.project_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project ID:** ${{ steps.create_project.outputs.project_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **User Group:** ${{ inputs.user_group_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Group ID:** ${{ steps.create_group.outputs.group_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget:** \$${{ inputs.budget_amount }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget Period:** ${{ inputs.budget_period }} days" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget Alert:** ${{ inputs.budget_alert }}%" >> $GITHUB_STEP_SUMMARY
